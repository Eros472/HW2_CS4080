Name: Erick Hambardzumyan 
Date: 10-20-2024
Class: CS 4080
Assignment: Homework 2 Questions 1-2




1. 

Leftmost Derivation:

Statementïƒ Assignment   
Assignmentïƒ Identifier = Expression
A = Expression
A = Term
A = Term * Factor
A = Factor * Factor
A = Identifier * Factor
A = B * Factor
A = B * (Expression)
A = B * (Term)
A = B * (Term * Factor) 
A = B * (Factor * Factor)
A = B * (Identifier * Factor)
A = B * (C * Factor)
A = B * (C * (Expression))
A = B * (C * (Expression + Term))
A = B * (C * (Term + Term))
A = B * (C * (Factor + Term))
A = B * (C * (Factor + Factor))
A = B * (C * (Identifier + Factor))
A = B * (C * (A + Identifier))
A = B * (C * (A + B))
Q.E.D




Parse Tree:

													Statement
													    |
													    |
													Assignment
											      ---------------------------------
                                                                                                |           |               |
                                                                                                |           |               |
                                                                                           Identifier       =           Expression
                                                                                                |                           |
                                                                                                |                           |
                                                                                                A                          Term
                                                                                                                 ------------------------------
                                                                                                                    |       |          |
                                                                                                                    |       |          |
                                                                                                                   Term     *        Factor
                                                                                                                    |                  |
                                                                                                                    |                  |
                                                                                                                  Factor           (Expression)
                                                                                                                    |                  |
                                                                                                                    |                  |
                                                                                                                 Identifier          Term
                                                                                                                    |           --------------------
                                                                                                                    |             |    |       |   
                                                                                                                    A             |    |       |
                                                                                                                                Term   *     Factor
                                                                                                                                  |            |
                                                                                                                                  |            |
                                                                                                                                Factor      (Expression)
                                                                                                                                  |       --------------------------------
                                                                                                                                  |           |          |           |
                                                                                                                              Identifier      |          |           |
                                                                                                                                  |       Expression     +          Term
                                                                                                                                  |           |                      |
                                                                                                                                  C           |                      |
                                                                                                                                             Term                  Factor
                                                                                                                                              |                      |
                                                                                                                                              |                      |
                                                                                                                                            Factor                Identifier
                                                                                                                                              |                      |
                                                                                                                                              |                      |
                                                                                                                                           Identifier                B
                                                                                                                                              |
                                                                                                                                              |
                                                                                                                                              A





2.

Static Scoping:

--> foo(u, 13) is called from main() //use non-local (global) variable u = 42
--> foo(42, 13)
--> int x = 42, int w = 13  //@params for foo() function
--> int v = 42  //assign v a new value of 42 (value of x)
--> call bar(add) from foo()
--> proc bar(add) {
    
    --> int u = 17  //Assign u = 17  (assign u global variable of w = 17) 
    --> add(v)  //Call the add() function since that was passed to bar()
    --> add(69) //Pass the global, non-local, variable of v since it is static scoping, which is 69, to add()
}

--> proc add(int z = 69)  //z == 69 {
     
     --> u = 69 + 42 + 69  //v == 69 (global non-local is used), u == 42 (global non-local is used), z == 69 (parameter z == 69)
     --> u = 180  //Sum is 180
}

--> return to main()
--> int main() {

     --> print(u)
     --> print(180)  //u = 180 as found in add()
}

--> end

Dynamic Scoping with Deep Binding:

--> foo(u, 13) is called from main() //use non-local (global) variable u = 42
--> foo(42, 13)
--> int x = 42, int w = 13  //@params for foo() function
--> int v = 42  //assign v a new value of 42 (value of x)
--> call bar(add) from foo()
--> proc bar(add) {
    
    --> int u = 17  //Assign u = 17  (assign u global variable of w = 17) 
    --> add(v)  //Call the add() function since that was passed to bar()
    --> add(42) //Since it is dynamic scoping, assign v the local variable, which is the v from foo()
}

--> proc add(int z = 42)  //z == 42 {
     
     --> u = v + u + z
     --> u = 42 + 42 + 42  //v == 42 (Because of dynamic binding, local v from foo() is used), u == 42 (global non-local is used due to deep binding, where deep binding uses the environment where add() was 			   	   //initially created, which means we use u == 42), z == 42 (parameter z == 42)
     --> u = 126  //Sum is 126
}

--> return to main()
--> int main() {

     --> print(u)
     --> print(126)  //u = 126 as found in add()
}

--> end


Dynamic Scoping with Shallow Binding:

--> foo(u, 13) is called from main() //use non-local (global) variable u = 42
--> foo(42, 13)
--> int x = 42, int w = 13  //@params for foo() function
--> int v = 42  //assign v a new value of 42 (value of x)
--> call bar(add) from foo()
--> proc bar(add) {
    
    --> int u = 17  //Assign u = 17  (assign u global variable of w = 17) 
    --> add(v)  //Call the add() function since that was passed to bar()
    --> add(42) //Since it is dynamic scoping, assign v the local variable, which is the v from foo()
}

--> proc add(int z = 42)  //z == 42 {
     
     --> u = v + u + z
     --> u = 42 + 17 + 42  //v == 42 (Because of dynamic binding, local v from foo() is used), u == 17 (local is used due to shallow binding, where shallow binding uses the environment where add() 			   		   //was initially called, which means we use the local value of u == 17 from the bar() function), z == 42 (parameter z == 42)
     --> u = 101  //Sum is 101
}

--> return to main()
--> int main() {

     --> print(u)
     --> print(101)  //u = 101 as found in add()
}

--> end





  

 

                   